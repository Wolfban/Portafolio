{"ast":null,"code":"\"use client\";\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/InView.tsx\nimport * as React from \"react\";\n\n// src/observe.ts\nvar observerMap = /* @__PURE__ */new Map();\nvar RootIds = /* @__PURE__ */new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = void 0;\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\nfunction getRootId(root) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== void 0).map(key => {\n    return \"\".concat(key, \"_\").concat(key === \"root\" ? getRootId(options.root) : options[key]);\n  }).toString();\n}\nfunction createObserver(options) {\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n  if (!instance) {\n    const elements = /* @__PURE__ */new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _a;\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold);\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          entry.isVisible = inView;\n        }\n        (_a = elements.get(entry.target)) == null ? void 0 : _a.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n  return instance;\n}\nfunction observe(element, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let fallbackInView = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : unsupportedValue;\n  if (typeof window.IntersectionObserver === \"undefined\" && fallbackInView !== void 0) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {};\n  }\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options);\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\n// src/InView.tsx\nfunction isPlainChildren(props) {\n  return typeof props.children !== \"function\";\n}\nvar InView = class extends React.Component {\n  constructor(props) {\n    super(props);\n    __publicField(this, \"node\", null);\n    __publicField(this, \"_unobserveCb\", null);\n    __publicField(this, \"handleNode\", node => {\n      if (this.node) {\n        this.unobserve();\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: void 0\n          });\n        }\n      }\n      this.node = node ? node : null;\n      this.observeNode();\n    });\n    __publicField(this, \"handleChange\", (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        this.unobserve();\n      }\n      if (!isPlainChildren(this.props)) {\n        this.setState({\n          inView,\n          entry\n        });\n      }\n      if (this.props.onChange) {\n        this.props.onChange(inView, entry);\n      }\n    });\n    this.state = {\n      inView: !!props.initialInView,\n      entry: void 0\n    };\n  }\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n  componentWillUnmount() {\n    this.unobserve();\n  }\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n  render() {\n    const {\n      children\n    } = this.props;\n    if (typeof children === \"function\") {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n    return React.createElement(as || \"div\", {\n      ref: this.handleNode,\n      ...props\n    }, children);\n  }\n};\n\n// src/useInView.tsx\nimport * as React2 from \"react\";\nfunction useInView() {\n  let {\n    threshold,\n    delay,\n    trackVisibility,\n    rootMargin,\n    root,\n    triggerOnce,\n    skip,\n    initialInView,\n    fallbackInView,\n    onChange\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a;\n  const [ref, setRef] = React2.useState(null);\n  const callback = React2.useRef();\n  const [state, setState] = React2.useState({\n    inView: !!initialInView,\n    entry: void 0\n  });\n  callback.current = onChange;\n  React2.useEffect(() => {\n    if (skip || !ref) return;\n    let unobserve;\n    unobserve = observe(ref, (inView, entry) => {\n      setState({\n        inView,\n        entry\n      });\n      if (callback.current) callback.current(inView, entry);\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        unobserve();\n        unobserve = void 0;\n      }\n    }, {\n      root,\n      rootMargin,\n      threshold,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n    return () => {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string, so it won't change between renders.\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  const entryTarget = (_a = state.entry) == null ? void 0 : _a.target;\n  const previousEntryTarget = React2.useRef();\n  if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: void 0\n    });\n  }\n  const result = [setRef, state.inView, state.entry];\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nexport { InView, defaultFallbackInView, observe, useInView };","map":{"version":3,"names":["React","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","concat","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","_a","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","arguments","length","undefined","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","unobserve","splice","indexOf","delete","size","disconnect","isPlainChildren","props","children","InView","Component","constructor","__publicField","node","triggerOnce","skip","setState","initialInView","observeNode","onChange","state","componentDidMount","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_unobserveCb","handleChange","render","ref","handleNode","as","createElement","React2","useInView","setRef","useState","useRef","current","useEffect","entryTarget","previousEntryTarget","result"],"sources":["C:\\Users\\Wolfban\\Documents\\GitHub\\Portafolio\\paso2\\portafolioprof\\node_modules\\src\\InView.tsx","C:\\Users\\Wolfban\\Documents\\GitHub\\Portafolio\\paso2\\portafolioprof\\node_modules\\src\\observe.ts","C:\\Users\\Wolfban\\Documents\\GitHub\\Portafolio\\paso2\\portafolioprof\\node_modules\\src\\useInView.tsx"],"sourcesContent":["import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}